# This reusable workflow will check to see if an action's source code has changed based on
# whether the PR includes files that match the files-with-code arg or are in one of the
# dirs-with-code directories.  If there are source code changes, this reusable workflow
# will then run the action's build (if one was provided) and update the README.md with the
# the latest version of the action.  If those two steps result in any changes that need to
# be committed, the workflow will fail because the PR needs some updates.  Instructions for
# updating the PR will be available in the build log, the workflow summary and as a PR
# comment if the PR came from a branch (not a fork).
# This workflow assumes:
#  - The main README.md is at the root of the repo
#  - The README contains a contribution guidelines and usage examples section

# ----------------------------------------------------------------------------------
# NOTE: A copy of this workflow exists in git-version-lite.  If changes are made to
#       this workflow, the corresponding changes should be made in git-version-lite
# ----------------------------------------------------------------------------------
name: Build and Review PR

on:
  workflow_call:
    inputs:
      action-name:
        description: The name of the action
        required: true
        type: string
      default-branch:
        description: Default branch for the action's repository
        required: false
        type: string
        default: main
      readme-name:
        description: The name of the README.md file
        required: false
        type: string
        default: 'README.md'
      readme-contribution-id:
        description: The html/markdown id of the contribution guidelines section of the README.md
        required: false
        type: string
        default: '#contributing'
      readme-examples-id:
        description: The html/markdown id of the usage examples section of the README.md
        required: false
        type: string
        default: '#usage-examples'
      files-with-code:
        description: | 
          The files that contain source code for the action.  Only files that affect the action's execution
          should be included like action.yml or package.json.  Do not include files like README.md or .gitignore.
        required: false
        type: string
      dirs-with-code:
        description: |
          The directories that contain source code for the action.  Only directories that affect the action's
          execution should be included like src or dist.  Do not include dirs like .github or node_modules.
        required: false
        type: string
      build-command:
        description: |
          The npm script to run to build the action.  This is typically 'npm run build' if the
          action needs to be compiled.  For composite-run-steps actions this is typically empty.
        required: false
        type: string
      node-version:
        description: The version of node to build the action with.
        required: false
        type: string
        default: '20.x'

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      HAS_SOURCE_CODE_CHANGES: ${{ steps.source-code.outputs.HAS_CHANGES }}
      NEXT_VERSION: ${{ steps.version.outputs.NEXT_VERSION }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check for code changes to the action source code
        id: source-code
        uses: im-open/.github/.github/actions/did-custom-action-code-change@v1
        with:
          files-with-code: ${{ inputs.files-with-code}}   # Default is 'action.yml,package.json,package-lock.json'
          folders-with-code: ${{ inputs.dirs-with-code }} # Default is 'src,dist'
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Action Source Code Changed - ${{ steps.source-code.outputs.HAS_CHANGES }} (open for details)
        run: |
          if [ "${{ steps.source-code.outputs.HAS_CHANGES }}" == "true" ]; then
            echo "This PR changes the action's source code.  Proceed with subsequent steps."
          else
            echo "This PR does not change the action's source code.  Skipping subsequent steps."
          fi

      - name: Get the next version for the repo
        if: steps.source-code.outputs.HAS_CHANGES == 'true'
        id: version
        uses: im-open/git-version-lite@v2

      - name: The next action version will be - ${{ steps.version.outputs.NEXT_VERSION || 'N/A'}}
        if: steps.source-code.outputs.HAS_CHANGES == 'true'
        run: echo "The next action version will be - ${{ steps.version.outputs.NEXT_VERSION }}"

  build-and-review-pr:
    runs-on: ubuntu-latest
    needs: [setup]

    env:
      NEXT_VERSION: ${{ needs.setup.outputs.NEXT_VERSION || 'N/A' }}
      HAS_CODE_CHANGES: ${{ needs.setup.outputs.HAS_SOURCE_CODE_CHANGES }}
      IS_FORK: ${{ github.event.pull_request.head.repo.fork }}
      PR_SOURCE: ${{ github.event.pull_request.head.repo.fork == true && 'fork' || 'branch' }}
      README: ${{ inputs.readme-name }}
      HAS_BUILD_STEP: ${{ inputs.build-command != '' }}
      NEEDS_BUILD_COMMIT: false
      NEEDS_README_COMMIT: false

    steps:
      - name: Action Source Code Changed (open for details)
        run: |
          if [ "${{env.HAS_CODE_CHANGES}}" == "true" ]; then
            echo "This PR changes the action's source code.  Proceed with subsequent steps and jobs."
          else
            echo "This PR does not change the action's source code.  Skipping subsequent steps and jobs."
          fi

      # ----------------------------------------------------------------------------------------------------
      #
      # The remaining steps in this build will use the env.HAS_CODE_CHANGES condition.  Setting it on each
      # step rather than the job will ensure this job always runs and that we can use it for status checks.
      #
      # ----------------------------------------------------------------------------------------------------

      - name: PR Source - ${{ env.PR_SOURCE }}
        if: env.HAS_CODE_CHANGES == 'true'
        run: echo "PRs can come from a branch or a fork.  This PR is from a ${{ env.PR_SOURCE }}."

      - name: Checkout
        if: env.HAS_CODE_CHANGES == 'true'
        uses: actions/checkout@v4

      # -----------------------------------
      # Check if action has been recompiled
      # -----------------------------------
      - name: If action has build step - Setup Node ${{ inputs.node-version }}
        uses: actions/setup-node@v4
        if: env.HAS_CODE_CHANGES == 'true' && env.HAS_BUILD_STEP == 'true'
        with:
          node-version: ${{ inputs.node-version }} # Default is 20.x

      - name: If action has build step - Build the action
        if: env.HAS_CODE_CHANGES == 'true' && env.HAS_BUILD_STEP == 'true'
        run: ${{ inputs.build-command }} # Typical value is '' or 'npm run build'

      - name: If action has build step - Check for unstaged build changes (open for details)
        if: env.HAS_CODE_CHANGES == 'true' && env.HAS_BUILD_STEP == 'true'
        run: |
          if [[ "$(git status --porcelain)" != "" ]]; then
            echo "The action needs to be re-built"
            echo "NEEDS_BUILD_COMMIT=true" >> "$GITHUB_ENV"
          else
            echo "The action has already been re-built"
          fi

      # -------------------------------------
      # Check if README needs version updates
      # -------------------------------------
      - name: ${{ env.README }} - Update version to @${{ env.NEXT_VERSION }}
        if: env.HAS_CODE_CHANGES == 'true'
        id: update-readme
        uses: im-open/.github/.github/actions/update-action-version-in-file@v1
        with:
          file-to-update: ./${{ env.README }} # Default: 'README.md'
          action-name: ${{ inputs.action-name }} # Default: 'github.repository'
          updated-version: ${{ env.NEXT_VERSION }}

      - name: ${{ env.README }} - Check for unstaged version changes (open for details)
        if: env.HAS_CODE_CHANGES == 'true'
        run: |
          if [ "${{ steps.update-readme.outputs.has-changes }}" == "true" ]; then
            echo "${{ inputs.readme-name }} needs version updates."
            echo "NEEDS_README_COMMIT=true" >> "$GITHUB_ENV"
          else
            echo "${{ inputs.readme-name }} does not need version updates."
          fi

      # -------------------------------------------
      # Fail the workflow if any updates are needed
      # -------------------------------------------
      - name: Fail the workflow if there are any outstanding changes
        if: env.HAS_CODE_CHANGES == 'true' &&  (env.NEEDS_BUILD_COMMIT == 'true' || env.NEEDS_README_COMMIT == 'true')
        id: summary
        uses: actions/github-script@v7
        with:
          script: |

            // Setup vars for the script to use
            const hasBuildStep =  ${{ env.HAS_BUILD_STEP }};
            const needsBuildChanges = hasBuildStep && ${{ env.NEEDS_BUILD_COMMIT }};
            const needsReadmeChanges = ${{ env.NEEDS_README_COMMIT }};

            const contribId = '${{ inputs.readme-contribution-id }}';
            const contributionLink = `https://github.com/${{ github.repository }}${contribId}`;
            const contributingTitle = contribId.replace('#', '').split('-').map(w => { return w.slice(0, 1).toUpperCase() + w.slice(1) }).join(' ');

            const exampleId = '${{ inputs.readme-examples-id }}';
            const readmeLink = `${{ github.event.pull_request.head.repo.html_url }}/blob/${{ github.event.pull_request.head.ref }}/${{ env.README }}`;
            const readmeExampleLink = `${readmeLink}${exampleId}`;
            const readmeExampleTitle = exampleId.replace('#', '').split('-').map(w => { return w.slice(0, 1).toUpperCase() + w.slice(1) }).join(' ');

            // Construct the instructions for fixing the PR
            let instructions = `Before this PR can be merged, the following item(s) should be addressed to comply with the action's ${contributingTitle} Guidelines.`
            if (needsReadmeChanges) {
              instructions += `
            - Please update the action's version in the ${readmeExampleTitle} section of ${{ env.README }}.  Each instance of this action should be updated to: 
              \`uses: ${{ inputs.action-name }}@${{ env.NEXT_VERSION }}\``;
            }
            if (needsBuildChanges){
              instructions += `
            - Please ensure the action has been recompiled by running the following command from the root of the repository: 
              \`${{ inputs.build-command }}\``;
            }

            // Update the instructions with links
            let instructionsWithLinks = instructions
              .replace('of ${{ env.README }}.', `of [${{ env.README }}](${readmeLink}).`)
              .replace(`${contributingTitle} Guidelines`, `[${contributingTitle} Guidelines](${contributionLink})`)
              .replace(readmeExampleTitle, `[${readmeExampleTitle}](${readmeExampleLink})`);
                        
            // Comment on PR for branches.  A fork's GH_TOKEN only has 'read' permission on all scopes so a comment cannot be made.
            if (!${{ env.IS_FORK }}) {
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: instructionsWithLinks
              })
            }

            // Add workflow summary & fail the build
            core.summary
              .addRaw(instructionsWithLinks)
              .write();
            core.setFailed(instructions);
      
      # Sometimes a user's local build doesn't match the runner environment no matter what settings are changed.
      #  Upload a copy of dist/ in that case so the user can update their branch with a runner compiled version.
      - name: Upload a copy of dist/index.js if the action needs to be recompiled
        if: env.HAS_CODE_CHANGES == 'true' &&  env.NEEDS_BUILD_COMMIT == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/
          retention-days: 1

      # ----------------------------------------------------
      # Add comment if Contributing Guidelines are satisfied
      # ----------------------------------------------------
      - name: Add comment if contributing guidelines are satisfied
        if: env.HAS_CODE_CHANGES == 'true' &&  env.NEEDS_BUILD_COMMIT == 'false' && env.NEEDS_README_COMMIT == 'false'
        uses: actions/github-script@v7
        with:
          script: |

            // Setup vars for the script to use
            const hasBuildStep =  ${{ env.HAS_BUILD_STEP }};
            
            const contribId = '${{ inputs.readme-contribution-id }}';
            const contributionLink = `https://github.com/${{ github.repository }}${contribId}`;
            const contributingTitle = contribId.replace('#', '').split('-').map(w => { return w.slice(0, 1).toUpperCase() + w.slice(1) }).join(' ');

            const exampleId = '${{ inputs.readme-examples-id }}';
            const readmeLink = `${{ github.event.pull_request.head.repo.html_url }}/blob/${{ github.event.pull_request.head.ref }}/${{ env.README }}`;
            const readmeExampleLink = `${readmeLink}${exampleId}`;
            const readmeExampleTitle = exampleId.replace('#', '').split('-').map(w => { return w.slice(0, 1).toUpperCase() + w.slice(1) }).join(' ');

            // Construct the prComment
            let prComment = `The action's [${contributingTitle} Guidelines](${contributionLink}) have been met:
            - The action's version in the [${readmeExampleTitle}](${readmeExampleLink}) section of [${{ env.README }}](${readmeLink}) has been updated to \`@${{ env.NEXT_VERSION }}\``
            
            if (hasBuildStep){
              prComment += `
            - The action has been recompiled (if needed) by running the build command from the root of the repository`;
            }

            // Comment on PR for branches.  A fork's GH_TOKEN only has 'read' permission on all scopes so a comment cannot be made.
            if (!${{ env.IS_FORK }}) {
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: prComment
              })
            }

            // Add workflow summary
            core.summary.addRaw(prComment).write();
